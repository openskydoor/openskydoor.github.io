---
layout: post
title: "Engineer Ruminates on Management"
categories: others
---

After almost 8 years of working in tech as an engineer, I still don't understand what managers do.

I've had a fair variety of managers in my career, ranging from a startup founder who had zero skills in managing any humans to a corporate manager who is as clueless about my job as I am about his. For the most part, I have felt mostly apathetic towards my managers, _even_ when they didn't understand my work or had no desire to promote me or when they were just straight up misogynistic (digression: the worst offenders of misogyny I encountered in my career have or had an Asian female partner.. and I am an Asian female ðŸ¤”). I think I can tune them out for a long time, because I care more about contributing to important problems and learning through that process, which is largely a function of the company, product, and my fellow ICs. Most managers would argue they influence these to a great extent, but in the short term, not really.

My apathy does not mean that I have no wants. Over the years, I couldn't help but think about how to build a _productive and efficient_ team, one that I'd love to work in. While I could have an impact on this as an IC, some of my ideas are better implemented by a manager. So this is just my rumination on that, the kind of rumination where you chew your thoughts over and over, not the deep introspective thoughts... ðŸ™ƒ Before I delve into my specific wants, here are my assumptions/beliefs:

1. The ultimate goal of any team is the team's output, as opposed to an individual's fancy pants success. An individual's success should be promoted only to the degree that it helps the team's output.
2. Everyone can achieve more and better than they do currently, if put in the right environment or guided appropriately.

Based on these beliefs at core, here are my wants.

{:toc}

## Use the best online-first document sharing platform and have people write on it.

Writing is wonderful for engineering teams for many reasons. For one, it is a great way to scale the team by not having your engineers verbally deliver tribal knowledge multiple times. It also makes your engineers a little more expandable by making the tribal knowledge everyone's knowledge. Also, written forms happen to be a great support material for promotion (no one's reading your code during the promotion reviews, but they might skim the documents you authored). However, writing is often not done enough. The frequent arguments against writing are that they take so long, get outdated soon, are not effective forms. I agree writing is not a panacea for all, but these arguments are more reflective of other practices than whether writing is effective. For example, if you think writing takes a long time, does it imply you the bar for clarity is lower in other formats? If the problem is things get outdated soon, why is it easy to communicate the new information periodically in a different format but hard to update the documents? Even when there is some practice of writing, it's often underappreciated because 1) what people choose to write about are not very productive topics, 2) reading and writing experiences are not great.

### What to write

In general, I think writing how-tos and explanations on how systems work is important. Initial design docs, proposals, and plans, i.e., future-focused docs, are good, but not as important in terms of building the long-term efficiency. I'm not saying you should write fewer of them, but people tend to put a lot more effort than they should in these, because they are the documents you write to "flex" your intention and ideas. In contrast, describing how to do something or how things work now is past-focused and can be written by anyone who is familiar. There is clearly some conflict of interest between present me who would prefer writing about my new ideas and plans and a future new hire who would prefer me writing about what I have done already, especially because the details always change during the implementation phase. More written materials to help many, not a few current decision makers, will help create culture of more productive writing.

### Writing Experience

#### Where

Companies usually use several different forums, e.g., emails, instant messaging like Slack, document sharing like Google Docs, and internal websites and more! (At one of my previous employers, the document platforms we used ranged from Google Docs to Quip to Dropbox Paper in the true libertarian fashion ðŸ˜†.) Trying to find a piece of information usually requires me to search in multiple of these platforms, regardless of the depth of information! I acknowledge these different forums serve slightly different purposes, but centralizing where information stays as much as possible encourages people to search and explore on their own, whereas if the cost of asynchronously discovering information is high, people will resort to private conversions/direct messages. I suppose Silicon Valley would approach this problem with a startup idea that searches across platforms, but I have never used such a thing yet, so consolidating where things are written is the analog solution I suggest.

#### Beautiful, easy, online-, sharing-first

Creating a readable and beautiful document should be easy, and sharing and collaborating should be considered default. This means a modern document sharing system, not one that has been retrofitted to be like one, such as Google Docs. When my previous employer depreciated Dropbox Paper in favor of Google Docs to save cost, my colleagues complained, and I thought they were nitpicking... until I experienced the pain myself! There is a plethora of subtle differences, e.g., ease of formatting, pleasant format by default, shortcuts, and markdown support that elevate the writers' experience. Unless it involves some private matters, information should be available by default. I have had unfortunate experiences where the materials I wanted existed already, but just not public to me yet, for no good reason. When lots of things _are_ available, maybe the information I'm looking for isn't directly there, but oftentimes I can piece together what I need from multiple sources. Building a big catalogue is important in and of itself.

### Discovery and Reading Experience

If I had to choose one quality of the writing forum, it'd be good search. One of my previous employer had lots of good documents to self-serve my learning, but even then, search was horrendous and I often ended up asking my coworkers for document links. Searching within the internal platform is inherently hard, because there probably isn't enough data to train a model to rank these documents well. I did see some improvement in this domain recently actually, and I hope it gets even better.

Once you land on some page, the format, font, space between paragraphs, they all matter for reading experience and productivity. It's surprising when a company emphasizes so much on creating inspiration with the most subtle changes, measured by a tiny improvement in the number of clicks, it cares so little about how inspiring their employees' communication experience is. If you want your team to get more things done not just this week, but for this year, pick the best online document sharing platform and have ICs write, especially the kind of materials that will generate a stable revenue of clicks and engagement.

## Remove Hierarchy of Opportunities

Companies usually have a level guideline for engineers. As you go higher in the chain, you are evaluated more on "leadership"--whatever that means--than your implementation. Essentially, the kinds of skills you are expected to have are different when you become a "senior" personnel. (I'm not the only one to note this. Andrew Ng in deeplearning.ai's newsletter once pointed out a senior engineer is a very different position from non-senior engineer positions!)

### Why?

However, regardless of your skill set, you don't get the opportunity to "lead" until you have been a mid-level engineer for some time, because you need to go through this arbitrary pipeline of opportunities. This is so puzzling to me. I have seen many new grads that were better tech communicators or just as good "coders" as myself; I've also seen people that are in a more senior position than me who were terrible coders or did not understand the basic principles of systems design. But it didn't matter what skill sets these people had; the "senior" engineer always wrote the spec and held meetings, while the new grads executed the tasks. Why aren't they allowed to collaborate by using their better skills? Are people just rent-seeking and too timid to admit that these new grads can be more productive than themselves?

### The Pipeline

I'm not advocating for zero hierarchy. (I simply don't have an opinion on whether that is a good thing.) What I do find problematic is the hierarchy of opportunities. It is a form of hazing in engineering organizations. As a new grad, you write code, and if you do that for a year or two without being a terribly annoying person to work with, you get to the next level. At this stage, you may not even be invited to product or engineering design review meetings. This next level means you can handle tasks without much supervision for the most part. You're most likely to be doing the same thing you have already been doing: code. But the next level expects you to do something you have not been asked to do: demonstrate leadership. What that in reality translates to is to be someone your manager likes talking to; more concretely, you will need skills like understanding the progress of the project and the relationship with the product goals, communicating it in manners that are easy for the manager to understand (they like organization and abstractions), and proactively resolving conflicts with any stakeholders. When your manager for some reason thinks you're ready to prepare for the next level promotion, you will be asked to write design docs and lead some meetings, because these are the concrete materials that your manager can use to make a case for your promotion. For the next next level, it will be similar things, but the scope of your project will be bigger, and the impact of your feature/product matters a lot too, even when the product decision is made by your product manager... so now you get political and try to land on a more impactful project.

One might argue you need the coding skills before you can do a system design and manage projects, but that implies that when you interview, if you can ace the system design portion, you will definitely do well in coding, which is clearly not true... Knowing how to code "well" helps, but this is a very inefficient way to learn to design systems. Perhaps I am missing something here, and there is an inherent boost to one's leadership and design skills when one has been coding for a few years, and this pipeline is all well justified. Maybe this hazing is a way for managers to de-risk their project, because there probably is some correlation between the participating engineers' years of experience and project success. And I'm just a weirdo to question this.

### Hella Senior Engineer Problem

I think different skills need to be nurtured earlier and _also later_. Have you ever been frustrated by some decision made by higher-ups and felt they don't understand the real important problems? They tend to arise because they are not expected to understand what lower level ICs do at depth. I have seen a head of analytics who didn't know SQL (I think because she did all of her work in Excel as an IC) and wasn't sure whether learning this was worth her time. It might have been justified because she's more of a people manager at that point, but you could imagine how she would not equipped to make certain decisions. What the upper level continues to do to mitigate this problem is to send out surveys to learn how ICs feel/think/want, but that does not give them insight. Quantitative understanding is important and can be delegated, but qualitative understanding is actually an efficient way to approach uncertainty and vague problems and cannot be delegated, i.e., they actually have to spend time to understand what ICs are doing at a deeper level.

Note that I'm not advocating for removing hierarchy because I want to promote fairness. As I mentioned earlier, my primary motivation is to build a productive team. Assuming in the short-term the individual productivity is constant, this translates to making the team more efficient. Right now I see so much of responsibilities are doled out based on this arbitrary pipeline of career progression and not based on strength, and there is a lack of aggressive and selective nurturing. The pipeline is an easy thing to default to, but I would like to work with a manager who identifies weaknesses and strengths in ICs and strategically uses them for different projects regardless of their titles.

## ICs Must Study

### What It Takes to Be a Software Engineer

There are a lot of people that become software engineers after having completed a bootcamp program these days. I did not study computer science for my undergraduate degree, but took several computer science classes as part of my field. I remember studying for software engineering interviews for the first time and thinking that I was learning the materials for the first time. That might have been not true; I just forgot most of CS 100 ðŸ¤“. In any case, I felt like most of my experience in computer science thus far was irrelevant to getting a job (I took classes like OS, CUDA, computer architecture, database systems). The tech industry knows this and now you can study for 6 months on some bootcamp program and get the same job as these suckers who studied for four years! (Actually, probably many other industries know this, but they feel too self-important to admit it and refuse to remove the barrier of entry.)

A lot of times your job as a software engineer is about executing well. Occasionally you research and study. Sometimes in order to solve a problem, you try solutions based on what you already know a few times. You finally decide to read some stuff online and decide you need to try this new stuff that you have never used before. Let's say it's some transformer-based model. You feel the pressure to execute, so you try to do the minimum work to use them. After all, frameworks like Torch and Tensorflow make them _almost_ a blackbox. As you are debugging, you start understanding them better. No one else in the team knows about transformers, so you become their go-to and increase your bus factor. You spent months doing this work, so you look like even a bigger hero to them. You profit.

### What Companies Are Willing To Pay For You To Study

The point I'm trying to draw is that while becoming an engineer does not require you to know anything beyond Leetcode and basic data structures, becoming a 10x engineer requires you to know all the other things. No one becomes a 10x engineer by executing something ten times faster. You become one by introducing a more productive solution faster. You can sometimes afford to spend time learning things as different needs arise, but that search path is inefficient, because you have not indexed the right things yet! Even in this case, the amount of time you can afford to spend will vary; most companies probably won't like you to take a semester-long course at Stanford to do this; they might let you take an easier online class, but would prefer you can just figure things out in a week by reading stuff online. (Seriously though, thank you internet and all the nerds who publish stuff online.) In the worst case, the pressure to deliver fast is too much and you do not get to learn anything in any meaningful depth. The way to become a 10x engineer in this environment is to just be a nerd that spends your free time doing this outside work. We celebrate such engineers. Hiring them is important, since what makes them successful is not in a manager's purview (unless it's a very toxic culture..)

Is this a fair assessment? No, some companies want to encourage learning and have dedicated learning budget. But it's your discretion to request it. At one of my previous employers, my manager told me I had to justify that it's relevant to my work. There was no way GANs were relevant to my day job, so I didn't bother. In other places, the manager said he would approve as long as it's under the yearly limit. In both of these cases, it's clear the company is not keen on paying me the wage for the necessary time for learning a hard material in depth. Also, typically it's not the lack of money that prevents someone from learning; it's the sense that it's optional and should be outside your work hours that makes us all prone to stop learning. Therefore, learning budget is not exactly an apt solution.

### This _Could_ Be Cheaper Than You Might Think

Here's an idea. Instead of celebrating the 10x engineers and just _kind of_ supporting people to learn, why don't we nurture 10x engineers systematically by forcing them to study? This might sound like an expensive thing to do, but most of the time, it does not have to be. Here's an example from my experience. It has long been established that Active Record callbacks in Rails are one of those "just don't" things, but in the relatively recently-started companies that I worked at have their Rails code littered with callbacks throughout written by very senior engineers. I know firsthand at least one of them has failed to refactor and migrate effectively because it's just too hard/expensive to know what is happening in your code. The amount of time you needed to study to prevent years of productivity loss? Less than one hour of online tech blog reading. Force your engineers to spend time to study. You can have people brainstorm ideas on what to learn and each person share their learning. The goal is to have a diversity of knowledge in somewhat tangential and somewhat relevant, but not urgently necessary domains. Having two people know callbacks are bad isn't twice as productive, so having individuals in the team learn different things makes learning somewhat cheaper. Sharing your learning with some presentation also makes it easier to justify that this is part of the ICs' job. This process might feel tedious and get de-prioritized frequently if you had tight deadlines or pressure to deliver, but I think this might have better ROI than relying on luck to hire a 10x engineer with lots of money. (I'd like to note that this is probably most speculative idea in this essay. I don't know that it works AT ALL... In fact, I don't know if any of my ideas are sane, but I think this is the most fishy and risky idea I mention here.)

## Measure Concrete Actions of ICs

Building an efficient team means building a team that gets done the most with the least amount of money, and humans are the biggest expense in software engineering teams, so getting the most out of them is important ðŸ¤‘! While senior and staff engineers are expensive, you would hardly guess that the output from a team of senior and staff engineers is going to be _proportionally_ higher than a team of a mixed level of engineers when you compare the team's total salary. (Note here that I am not questioning the price. Market determines this, not some powerful union of staff engineers...) While the amount of experience is a factor in playing the "Moneyball" with your engineering team, my favorite team I have worked in in my career consisted of people with different strengths: we were good at math, deep learning, infrastructure, code performance, technical communication, etc., but no individual was the rock star in multiple things. So how can I build a team where each individual is relatively cheap but that as a whole creates an expensive output? You could just try to do your best in recruiting, but that's out of the scope of this post. Let's focus on loving the one you're with here ðŸŽ¶. Where do we start? Start measuring the employees on more aspects. During the review cycle, the questions I answer to give feedback to someone are broad and vague: what does this person do well? what can this person improve on? I want these measurements to be more specific. Think about what you need in this team: project management, ongoing maintenance, agility, research/new feature, etc. What skills do you expect your ICs to have to get these done? Technical communication, planning, code quality, code review quality/turnaround, knowledge in product, empathy with customers, qualitative/quantitative analysis skills, etc. Too often we measure things at high granularity, e.g., leadership, experience in fancy big impactful projects, and they seem hard to get. But if you actually tried to list the more fine-grained qualities that you expect from someone that would score high on these mighty sounding qualities, you would soon see that they seem a lot more tangible and are probably already present in your team to a degree.

## Micromanage ICs' Career

Let's think what is the point of having someone get promoted in the team:

1. promotions make ICs motivated and motivated ICs work harder/do not quit
2. you need a diverse set of skills within the team, such as leadership, planning, execution (and different skill sets are expected at different levels, oddly.)

The point I'm trying to draw is that if all the things we do in a tech organization at heart is to increase the output, you have to be able to tie this career and leveling shinanigans into output, and you manage people to increase output, not to haze them.

Too often, there are some expectation guidelines for each level, and you may talk about some things that you can do to be at the next level with the manager. But the action items set for the ICs are vague, especially compared to the details an IC would include in any technical task description (at least its ideal version)! Another problem is that they are also mostly _up to the ICs' discretion_ to execute. It's as if nobody actually believes these things will help the output of the team!

People have different amounts of aspiration, different views on work-life balance, extroversion/introversion, etc., but I believe everyone can level up if they find what they are particularly good at, work on/practice it for a while, and market it well (assuming they want to do this). I'd like managers to micromanage people's careers more, make related tasks part of the team's weekly plan, so everyone is given the time and sense of accountability to execute them, as it is the case for technical tasks. Also, don't just say vague-ass things like "take more ownership"; demonstrate and give concrete examples and review regularly how they did in that regard. If you don't analyze the situations frequently enough, the details get lost and the feedbacks end up more of a statement of impression than evidence.

These all might sound like a manager is meant to treat ICs like little kids when it comes to career. But we are already confined in a very hierarchical environment. Even as I was leading technical projects, there were times when I was never invited into the quarterly planning meetings. Everything was decided by the product and engineering managers. ICs are already being told what to do. If a manager is truly an expert in "people" and an IC in tech, managers should be able to tell ICs what to do for their career with way more details. It's frowned upon for managers to micromanage "tech" decisions, but that is because ICs want to micromanage those. If an IC is not micromanaging their career, managers should be able to step in and manage him a least a bit more, not just pick the next likely to be promoted and focus on her.

## Closing...

It may seem that I'm frustrated by what managers already do, but I acknowledge there are a lot of baseline things they do well, and that's not my focus of this essay. It also might sound like I am very passionate about management. In reality, I am too soft-spoken for any manager to think I'm fit for the job, and I agree I don't meet the profile. But I couldn't help but notice the conflict of interest in building a productive and efficient engineering team, that prioritizes the manager's success on metrics like no. people managed and IC promotion/hiring history, and indexing ICs' success too much on ostensible and vague things like project scope and leadership. Economics is my favorite subject to read for leisure, so every problem looks like a policy and incentive problem to me, rather than a junior/underperforming employee. The success of the product and the company is the ultimate goal. I think there's a lot of room for improving the alignment between that and engineering management, instead of praying for the next superstar engineer/manager. Clearly, I sound like someone who doesn't understand what managers do.
